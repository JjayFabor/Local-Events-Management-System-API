openapi: 3.0.3
info:
  title: Local Events Management System API
  version: 1.0.0
  description: |+
    Welcome to the Local Events Management System API!

    This API allows for managing local events, including user authentication, event creation, registration, and searching/filtering of events.

    **Default Throttling:**

    * **Unauthenticated**: 60 requests per hour
    * **Authenticated**: 2000 requests per day

paths:
  /api/events/:
    post:
      operationId: api_events_create
      description: This endpoint allows an admin user only to create a new event.
      summary: Create a new event
      tags:
      - Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
            examples:
              CreateEventExample:
                value:
                  category_name: Education
                  event_name: Annual Tech Conference
                  event_hosts: Tech Innovators Inc.
                  description: A conference for technology enthusiasts to explore
                    new trends.
                  image_url: https://example.com/images/tech-conference.jpg
                  event_date: '2024-09-15T09:00:00Z'
                  category: 1
                  location: Tech Convention Center, Silicon Valley
                  registration_deadline: '2024-09-01T23:59:59Z'
                  capacity: 500
                  status: UPCOMING
                summary: Create Event Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/events/category/:
    get:
      operationId: api_events_category_list
      description: Retrieve a list of all categories. Only accessible by Admin users.
      summary: List Categories
      tags:
      - Categories
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                ListOfCategories:
                  value:
                  - - id: 1
                      name: Education
                    - id: 2
                      name: Sports
                  summary: List of Categories
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action.
          description: User does not have permission
    post:
      operationId: api_events_category_create
      description: Create a new category. Only accessible by Admin users.
      summary: Create Category
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
            examples:
              CreateCategoryRequest:
                value:
                  name: Health
                summary: Create Category Request
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action.
          description: User does not have permission
  /api/events/event-detail/{event_id}/:
    get:
      operationId: api_events_event_detail_retrieve
      description: Retrieve the details of an event and its participants.
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        description: ID of the event to retrieve details for
        required: true
      tags:
      - Events
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/events/event-list/:
    get:
      operationId: api_events_event_list_list
      description: This endpoint allows any authenticated user to retrieve all list
        of available events or search for events.
      summary: List Available Events
      parameters:
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: location
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Events
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              examples:
                ListOfEvents:
                  value:
                  - - id: 1
                      event_name: Annual Tech Conference
                      event_hosts: Tech Innovators Inc.
                      description: A conference for technology enthusiasts to explore
                        new trends.
                      image_url: https://example.com/images/tech-conference.jpg
                      event_date: '2024-09-15T09:00:00Z'
                      category: Education
                      location: Tech Convention Center, Silicon Valley
                      registration_deadline: '2024-09-01T23:59:59Z'
                      capacity: 500
                      status: UPCOMING
                  summary: List of Events
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/events/register-event/{event_id}/:
    post:
      operationId: api_events_register_event_create
      description: This endpoint allows an authenticated user to register for an event
        by providing the event ID in the URL path. It ensures that the user can only
        register once and checks if the event has reached its capacity.
      summary: Register for an Event
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        description: ID of the event to register for
        required: true
      tags:
      - Events
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponse'
              examples:
                SuccessfulRegistration:
                  value:
                    message: Event registration successful.
                    total_participants: 5
                  summary: Successful Registration
                EventIsFull:
                  value:
                    message: Event is full
                  summary: Event is Full
                AlreadyRegistered:
                  value:
                    message: You are already registered for this event.
                  summary: Already Registered
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponse'
          description: ''
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponse'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/admin/create/:
    post:
      operationId: api_users_admin_create_create
      description: Created an Admin Account.
      tags:
      - Admin User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin2@example.com
                  password: admin2password
                  first_name: Admin2
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin2@example.com
                  password: admin2password
                  first_name: Admin2
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin2@example.com
                  password: admin2password
                  first_name: Admin2
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/admin/initial-create/:
    post:
      operationId: api_users_admin_initial_create_create
      description: Created an Admin Account.
      tags:
      - Admin User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin@example.com
                  password: adminpassword
                  first_name: Admin
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin@example.com
                  password: adminpassword
                  first_name: Admin
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              AdminUser:
                value:
                  email: test_admin@example.com
                  password: adminpassword
                  first_name: Admin
                  last_name: User
                summary: Example of an admin user registration
                description: Example payload for registering an admin user
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/admin/login/:
    post:
      operationId: api_users_admin_login_create
      description: Admin User loging and return refresh and access token
      tags:
      - Admin User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/admin/logout/:
    post:
      operationId: api_users_admin_logout_create
      description: Logout admin user
      tags:
      - Admin User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/login/:
    get:
      operationId: api_users_login_retrieve
      description: Get the authenticated user's details
      tags:
      - User
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
              examples:
                SuccessfulLogin:
                  value:
                    message: Login successful
                    csrf_token: csrf-token-value
                  summary: A successful login example
                  description: Example of a successful login response
                AuthenticatedUser:
                  value:
                    email: user@example.com
                    first_name: John
                    last_name: Doe
                    events_joined:
                    - list of events the user has join
                  summary: Example of a successful response with authenticated user
                    data
                  description: Returns the details of the authenticated user
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                InvalidCredentials:
                  value:
                    error: Invalid Credentials
                  summary: An unsuccessful login example
                  description: Example of an unsuccessful login response due to invalid
                    credentials
                UnauthenticatedUser:
                  value:
                    error: User is not authenticated
                  summary: Example of an unauthenticated response
                  description: Returns an error message when the user is not authenticated
          description: ''
    post:
      operationId: api_users_login_create
      description: Authenticate a user and return a CSRF token
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              examples:
                SuccessfulLogin:
                  value:
                    message: Login successful
                    csrf_token: csrf-token-value
                  summary: A successful login example
                  description: Example of a successful login response
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                InvalidCredentials:
                  value:
                    error: Invalid Credentials
                  summary: An unsuccessful login example
                  description: Example of an unsuccessful login response due to invalid
                    credentials
          description: ''
  /api/users/logout/:
    post:
      operationId: api_users_logout_create
      description: Log out the authenticated user
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/users/register/:
    post:
      operationId: api_users_register_create
      description: Register a new user
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
            examples:
              RegularUser:
                value:
                  email: test_user@example.com
                  password: userpassword
                  first_name: Test
                  last_name: User
                summary: Example of a regular user registration
                description: Example payload for registering a regular user
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
            examples:
              RegularUser:
                value:
                  email: test_user@example.com
                  password: userpassword
                  first_name: Test
                  last_name: User
                summary: Example of a regular user registration
                description: Example payload for registering a regular user
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserRequest'
            examples:
              RegularUser:
                value:
                  email: test_user@example.com
                  password: userpassword
                  first_name: Test
                  last_name: User
                summary: Example of a regular user registration
                description: Example payload for registering a regular user
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - basicAuth: []
      - Bearer: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
components:
  schemas:
    Admin:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        events_joined:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - email
      - events_joined
      - first_name
      - last_name
    AdminRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - first_name
      - last_name
      - password
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - id
      - name
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
      required:
      - name
    CustomUser:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        events_joined:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - email
      - events_joined
      - first_name
      - last_name
    CustomUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - first_name
      - last_name
      - password
    Error:
      type: object
      properties:
        error:
          type: string
      required:
      - error
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          readOnly: true
        event_name:
          type: string
          maxLength: 100
        event_hosts:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 200
        image_url:
          type: string
          format: uri
          maxLength: 200
        event_date:
          type: string
          format: date-time
        location:
          type: string
          maxLength: 100
        registration_deadline:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        category:
          type: integer
      required:
      - capacity
      - category
      - category_name
      - created_at
      - description
      - event_date
      - event_hosts
      - event_name
      - id
      - image_url
      - location
      - registration_deadline
      - updated_at
    EventDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event_name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 200
        image_url:
          type: string
          format: uri
          maxLength: 200
        event_date:
          type: string
          format: date-time
        location:
          type: string
          maxLength: 100
        registration_deadline:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        category:
          type: integer
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
      required:
      - capacity
      - category
      - created_at
      - description
      - event_date
      - event_name
      - id
      - image_url
      - location
      - participants
      - registration_deadline
      - updated_at
    EventRegistrationResponse:
      type: object
      properties:
        message:
          type: string
        total_participants:
          type: integer
      required:
      - message
      - total_participants
    EventRequest:
      type: object
      properties:
        event_name:
          type: string
          minLength: 1
          maxLength: 100
        event_hosts:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
          maxLength: 200
        image_url:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
        event_date:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 100
        registration_deadline:
          type: string
          format: date-time
        capacity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/StatusEnum'
        category:
          type: integer
      required:
      - capacity
      - category
      - description
      - event_date
      - event_hosts
      - event_name
      - image_url
      - location
      - registration_deadline
    Message:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    MessageRequest:
      type: object
      properties:
        message:
          type: string
          minLength: 1
      required:
      - message
    Participant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - id
    StatusEnum:
      enum:
      - UPCOMING
      - ONGOING
      - COMPLETED
      - CANCELED
      type: string
      description: |-
        * `UPCOMING` - UPCOMING
        * `ONGOING` - ONGOING
        * `COMPLETED` - COMPLETED
        * `CANCELED` - CANCELED
    Token:
      type: object
      properties:
        csrf_token:
          type: string
      required:
      - csrf_token
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://127.0.0.1:8000
  description: Local server
- url: http://localhost:8000
  description: Local server
